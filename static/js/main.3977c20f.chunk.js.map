{"version":3,"sources":["components/Title.js","img/Blank_Go_board.svg","components/Board.js","components/Winner.js","checkWinner.js","Gomoku.js","index.js"],"names":["Header","styled","div","BoardTitle","h1","ResetButton","button","Title","player","resetFunction","onClick","Square","props","color","BoardWrapper","boardImg","Board","boardInfo","map","row","rowIndex","col","colIndex","value","id","WinnerBoxWrapper","winner","Button","Winnerbox","console","log","window","location","reload","countTotal","newBoard","currentY","currentX","directionY","directionX","total","nowChess","tempX","tempY","checkWinner","chessY","chessX","initBoardArray","boardArray","i","boardArrayRow","j","push","Gomoku","initPlayer","useState","board","setBoard","setPlayer","setWinner","className","y","x","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3977c20f.chunk.js","sourcesContent":["import styled from 'styled-components';\nconst Header = styled.div`\n  position:relative;\n  max-width:800px;\n  margin:0 auto;\n`\nconst BoardTitle = styled.h1`\n  padding-top:10px;\n  margin:20px 0 10px 0;\n`\nconst ResetButton = styled.button`\n  height:40px;\n  border:none;\n  cursor: pointer;\n  font-size:1rem;\n  border-radius:5px;\n  position:absolute;\n  top:50%;\n  right:10px;\n  transform:translateY(-50%);\n`\n\nexport default function Title({ player ,resetFunction}) {\n  return (\n    <Header>\n      <BoardTitle>Player is {player}</BoardTitle>\n      <ResetButton onClick={resetFunction}>reset</ResetButton>\n    </Header>\n  )\n}\n\n","export default __webpack_public_path__ + \"static/media/Blank_Go_board.0fc990cd.svg\";","import styled from 'styled-components'\nimport boardImg from '../img/Blank_Go_board.svg'\n\nconst Square = styled.button`\n  color:black;\n  border:none;\n  border-radius:50%;\n  box-sizing:border-box;\n  background-color:rgba(0,0,0,0);\n  width:20px;\n  height:20px;\n  margin:8px 10px;\n  &:hover{\n    background-color: ${props => props.player};\n    box-shadow: 2px 2px 5px;\n  }\n  background-color:${props => props.color};\n  `\n\nconst BoardWrapper = styled.div`\n  background-image: url(${boardImg});\n  background-repeat:no-repeat;\n  background-size: contain;\n  width: 760px;\n  height:760px;\n  margin: 0 auto;\n  display:flex;\n  flex-wrap:wrap;\n  padding:5px;\n  `\n\nexport default function Board({ boardInfo, onClick,player }) {\n  return (\n    <BoardWrapper>\n      {boardInfo.map((row, rowIndex) => row.map(\n        (col, colIndex) => {\n          return <Square\n            key={col.id}\n            onClick={() => { onClick(rowIndex, colIndex, col.value) }}\n            color={col.value} player={player}\n          />\n        }\n      )\n      )\n      }\n    </BoardWrapper>\n  )\n}","import styled from 'styled-components';\nconst WinnerBoxWrapper = styled.div`\n  position: absolute;\n  display:${props => props.winner ? 'block':'none'};\n  max-width:800px;\n  margin:0 auto;\n  top:50%;\n  left:50%;\n  transform:translate(-50%,-50%);\n  background-color:#ccc;\n  padding:2rem;\n  box-shadow:3px 4px 4px #999;\n`\nconst Title = styled.h1`\n  padding-top:10px;\n  margin:20px 0 10px 0;\n`\nconst Button = styled.button`\n  height:40px;\n  border:none;\n  cursor: pointer;\n  font-size:1rem;\n  border-radius:5px;\n`\n\nexport default function Winnerbox({  winner }) {\nconsole.log(winner)\n  return (\n    <WinnerBoxWrapper winner={winner}>\n      <Title>Winner is {winner ==='black'?'黑棋':'白旗'}</Title>\n      <Button onClick={()=>{ window.location.reload() }} >再玩一次</Button>\n    </WinnerBoxWrapper>\n  )\n}\n\n","function countTotal (newBoard, currentY, currentX, directionY, directionX) {\n  let total = 0;\n  let nowChess = newBoard[currentY][currentX].value;\n  let tempX = currentX;\n  let tempY = currentY;\n  while (total < 5) {\n    tempX += directionX\n    tempY += directionY\n    if (tempX < 0 || tempX > 18 || tempY < 0 || tempY > 18 || newBoard[tempY][tempX].value !== nowChess)break;\n      total++;\n  }\n  return total\n}\n\nconst checkWinner = (newBoard, chessY, chessX) => {\n  console.log(countTotal(newBoard, chessY, chessX, 1, 0) + countTotal(newBoard, chessY, chessX, -1, 0))\n  console.log(countTotal(newBoard, chessY, chessX, 0, 1) + countTotal(newBoard, chessY, chessX, 0, -1))\n  console.log(countTotal(newBoard, chessY, chessX, 1, 1) + countTotal(newBoard, chessY, chessX, -1, -1))\n  console.log(countTotal(newBoard, chessY, chessX, 1, -1) + countTotal(newBoard, chessY, chessX, -1, 1))\n\n  if (\n    countTotal(newBoard, chessY, chessX, 1, 0) + countTotal(newBoard, chessY, chessX, -1, 0) >= 4 ||\n    countTotal(newBoard, chessY, chessX, 0, 1) + countTotal(newBoard, chessY, chessX, 0, -1) >= 4 ||\n    countTotal(newBoard, chessY, chessX, 1, 1) + countTotal(newBoard, chessY, chessX, -1, -1) >= 4 ||\n    countTotal(newBoard, chessY, chessX, 1, -1) + countTotal(newBoard, chessY, chessX, -1, 1) >= 4\n  ) {\n    return true;\n  } else {\n    return false\n  }\n}\n\nexport default  checkWinner","import React, { useState } from 'react';\nimport Title from './components/Title';\nimport Board from './components/Board';\nimport Winnerbox from './components/Winner';\nimport checkWinner from './checkWinner';\n\nfunction initBoardArray() {\n  let boardArray = []\n  let id = 1\n  for (let i = 0; i < 19; i += 1) {\n    let boardArrayRow = []\n    for (let j = 0; j < 19; j += 1) {\n      boardArrayRow.push({\n        id,\n        value: null,\n      })\n      id++\n    }\n    boardArray.push(boardArrayRow)\n  }\n  return boardArray\n}\nexport default function Gomoku() {\n  const initPlayer = 'black'\n  const [board, setBoard] = useState(initBoardArray)\n  const [player, setPlayer] = useState(initPlayer)\n  const [winner, setWinner] = useState(null);\n  const handleUpdateChess = (y, x, value) => {\n    if (value || winner) return        //檢查是否已有旗子、贏家，如果有則不能下棋\n    const newBoard = board.map((row, currentY) => {\n      if (currentY !== y) return row        // 找尋相同的row，不是則直接返回\n\n      return row.map((col, currentX) => {\n        if (currentX !== x) return col\n        return {\n          ...col,\n          value: player\n        }\n      })\n    })\n\n    setBoard(newBoard)\n    checkWinner(newBoard, y, x) ? setWinner(player) : setPlayer(player === 'black' ? 'white' : 'black')\n  }\n  const handleResetBoard = () => {\n    setBoard(initBoardArray)\n    setPlayer(initPlayer)\n    setWinner(null)\n  }\n  return (\n    <div className=\"app\">\n      <Title player={player} resetFunction={handleResetBoard} />\n      <Board boardInfo={board} onClick={handleUpdateChess}  player={player}/>\n      <Winnerbox  winner={winner} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Gomoku from './Gomoku';\nimport './index.css';\n\nReactDOM.render(\n  <>\n    <Gomoku  />\n  </>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}